---
import ResponsiveNav from '../components/ResponsiveNav.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
import { Image } from 'astro:assets';

// Import available images
import kingPrawnRedCurry from '../assets/king-prawn-red-curry.jpg';

const { frontmatter } = Astro.props ?? { frontmatter: {} };

// Map image filenames to imported assets
const imageMap = {
  'king-prawn-red-curry.jpg': kingPrawnRedCurry,
};

// Get the image source - either imported asset or fallback
const getImageSrc = (imageName) => {
  if (imageName && imageMap[imageName]) {
    return imageMap[imageName];
  }
  return '/images/placeholder.svg';
};
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{frontmatter.title} | My Recipe Website</title>
  <link href="https://fonts.googleapis.com/css2?family=Commissioner:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-white text-gray-900 font-sans" style="font-family: 'Commissioner', sans-serif;">
  <ResponsiveNav slot="nav" />
  <main class="max-w-4xl mx-auto p-4 sm:p-6">
    {frontmatter.image && (
      <div class="aspect-video mb-6 overflow-hidden rounded-lg shadow-lg">
        {imageMap[frontmatter.image] ? (
          <Image
            src={imageMap[frontmatter.image]}
            alt={frontmatter.title}
            class="w-full h-full object-cover"
            width={800}
            height={400}
          />
        ) : (
          <img
            src="/images/placeholder.svg"
            alt={frontmatter.title}
            class="w-full h-full object-cover"
            width={800}
            height={400}
          />
        )}
      </div>
    )}
    <div class="mb-6">
      <h1 class="text-3xl sm:text-4xl font-bold mb-3 text-gray-900">{frontmatter.title}</h1>
      {frontmatter.description && (
        <p class="text-lg sm:text-xl text-gray-700 leading-relaxed">{frontmatter.description}</p>
      )}
    </div>
    
    <div class="bg-yellow-50 rounded-lg p-4 mb-6">
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-3 text-sm">
        {frontmatter.recipeYield && (
          <div class="text-center">
            <div class="font-semibold text-gray-900">Yield</div>
            <div class="text-gray-600">{frontmatter.recipeYield}</div>
          </div>
        )}
        {frontmatter.prepTime && (
          <div class="text-center">
            <div class="font-semibold text-gray-900">Prep</div>
            <div class="text-gray-600">{frontmatter.prepTime.replace('PT','').toLowerCase()}</div>
          </div>
        )}
        {frontmatter.cookTime && (
          <div class="text-center">
            <div class="font-semibold text-gray-900">Cook</div>
            <div class="text-gray-600">{frontmatter.cookTime.replace('PT','').toLowerCase()}</div>
          </div>
        )}
        {frontmatter.totalTime && (
          <div class="text-center">
            <div class="font-semibold text-gray-900">Total</div>
            <div class="text-gray-600">{frontmatter.totalTime.replace('PT','').toLowerCase()}</div>
          </div>
        )}
      </div>
      {frontmatter.date && (
        <div class="text-center mt-3 pt-3 border-t border-yellow-200">
          <span class="text-sm text-gray-500">Published {new Date(frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
        </div>
      )}
    </div>
    <div class="grid lg:grid-cols-3 gap-8 mb-8">
      {frontmatter.recipeIngredient && (
        <section class="lg:col-span-1">
          <h2 class="text-2xl font-bold mb-4 text-gray-900">Ingredients</h2>
          <div class="bg-gray-50 rounded-lg p-4">
            <ul class="space-y-2">
              {frontmatter.recipeIngredient.map(ingredient => (
                <li class="flex items-start gap-2">
                  <span class="text-yellow-500 mt-1">â€¢</span>
                  <span class="text-gray-700">{ingredient}</span>
                </li>
              ))}
            </ul>
          </div>
        </section>
      )}
      
      {frontmatter.recipeInstructions && (
        <section class="lg:col-span-2">
          <h2 class="text-2xl font-bold mb-4 text-gray-900">Instructions</h2>
          <div class="space-y-4">
            {frontmatter.recipeInstructions.map((step, i) => (
              <div class="flex gap-4 p-4 bg-white border rounded-lg shadow-sm">
                <div class="flex-shrink-0 w-8 h-8 bg-yellow-500 text-white rounded-full flex items-center justify-center font-bold text-sm">
                  {i + 1}
                </div>
                <p class="text-gray-700 leading-relaxed">{step.text}</p>
              </div>
            ))}
          </div>
        </section>
      )}
    </div>
    {frontmatter.tags && frontmatter.tags.length > 0 && (
      <div class="mb-8">
        <h3 class="text-lg font-semibold mb-3 text-gray-900">Tags</h3>
        <div class="flex flex-wrap gap-2">
          {frontmatter.tags.map(tag => (
            <a href={`/tags/${encodeURIComponent(tag)}/`} class="inline-block bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-medium hover:bg-yellow-200 transition-colors">
              {tag}
            </a>
          ))}
        </div>
      </div>
    )}
    
    <article class="prose prose-lg max-w-none prose-headings:text-gray-900 prose-p:text-gray-700">
      <slot />
    </article>
  </main>
  <Footer slot="footer" />
</body>
